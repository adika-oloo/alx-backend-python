name: Messaging App CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install linting dependencies
      run: |
        pip install --upgrade pip
        pip install flake8 flake8-django flake8-black flake8-isort
    
    - name: Run flake8 linting
      run: |
        # Run flake8 with strict error handling
        flake8 src/ tests/ --max-line-length=88 --show-source --statistics || exit 1
    
    - name: Check code formatting with black
      run: |
        pip install black
        black --check src/ tests/ --line-length=88
    
    - name: Check import sorting with isort
      run: |
        pip install isort
        isort --check-only src/ tests/

  test:
    runs-on: ubuntu-latest
    name: Tests and Coverage
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-html pytest-cov coverage
    
    - name: Run tests with pytest and coverage
      run: |
        python -m pytest tests/ \
          --html=test-report.html \
          --self-contained-html \
          --cov=src \
          --cov-report=html:coverage-report \
          --cov-report=xml:coverage.xml \
          --cov-report=term \
          -v
    
    - name: Upload test results artifact
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-report.html
          coverage-report/
          coverage.xml
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-python-${{ matrix.python-version }}
    
    - name: Check coverage threshold
      run: |
        # Fail if coverage is below 80%
        python -m coverage report --fail-under=80

  build-docker:
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.ref == 'refs/heads/main'  # Only build on main branch
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/messaging-app:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/messaging-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'  # Only deploy on main branch
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        # Add your deployment commands here
    
    - name: Send notification
      run: |
        echo "Deployment completed successfully!"

# Workflow-level environment variables
env:
  PYTHONPATH: src
