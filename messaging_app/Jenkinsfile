pipeline {
    agent any
    
    environment {
        PYTHON = 'python3'
        PIP = 'pip3'
        PROJECT_DIR = 'messaging_app'
        DOCKER_IMAGE = 'your-dockerhub-username/messaging-app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        DOCKER_REGISTRY = 'docker.io'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git(
                    url: 'https://github.com/alx-backend-python.git',
                    credentialsId: 'github-credentials',
                    branch: 'main'
                )
            }
        }
        
        stage('Navigate to Project Directory') {
            steps {
                sh '''
                    echo "Changing to project directory: ${PROJECT_DIR}"
                    cd ${PROJECT_DIR}
                    pwd
                    ls -la
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh '''
                    cd ${PROJECT_DIR}
                    ${PIP} install --upgrade pip
                    if [ -f requirements.txt ]; then
                        ${PIP} install -r requirements.txt
                    fi
                    ${PIP} install pytest pytest-html
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                sh '''
                    cd ${PROJECT_DIR}
                    ${PYTHON} -m pytest tests/ \
                        --html=test-report.html \
                        --self-contained-html \
                        -v
                '''
            }
            post {
                always {
                    publishHTML(target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: "${PROJECT_DIR}",
                        reportFiles: 'test-report.html',
                        reportName: 'Pytest HTML Report'
                    ])
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    sh '''
                        cd ${PROJECT_DIR}
                        # Build the Docker image
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                        docker build -t ${DOCKER_IMAGE}:latest .
                        
                        # List images to verify build
                        docker images | grep ${DOCKER_IMAGE}
                    '''
                }
            }
            post {
                success {
                    echo "Docker image built successfully: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
                failure {
                    echo "Docker image build failed"
                    error("Docker build failed")
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    echo "Pushing Docker image to ${DOCKER_REGISTRY}"
                    withCredentials([usernamePassword(
                        credentialsId: 'dockerhub-credentials',
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh '''
                            # Login to Docker Hub
                            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin ${DOCKER_REGISTRY}
                            
                            # Push both tagged versions
                            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                            docker push ${DOCKER_IMAGE}:latest
                            
                            # Logout from Docker Hub
                            docker logout ${DOCKER_REGISTRY}
                        '''
                    }
                }
            }
            post {
                success {
                    echo "Docker image pushed successfully to ${DOCKER_REGISTRY}"
                }
                failure {
                    echo "Docker image push failed"
                    error("Docker push failed")
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                sh '''
                    # Remove local Docker images to save space
                    docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                    docker rmi ${DOCKER_IMAGE}:latest || true
                    
                    # Clean up Docker system
                    docker system prune -f
                '''
            }
        }
    }
    
    post {
        always {
            echo "Pipeline execution completed for ${PROJECT_DIR}"
            sh '''
                echo "Cleaning up workspace..."
                cd ${PROJECT_DIR}
                rm -f test-report.html || true
                rm -rf __pycache__ || true
                rm -rf .pytest_cache || true
            '''
        }
        success {
            echo "Pipeline succeeded! All stages completed."
            echo "Docker image available at: ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}"
        }
        failure {
            echo "Pipeline failed! Check the logs for details."
        }
    }
}
